plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.50'
    id "com.github.ben-manes.versions" version "0.27.0"
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

group 'io.etcd'
version '1.0.0'

sourceCompatibility = 1.8

def kotlinVersion = '1.3.50'
def serializationVersion = '0.13.0'
def ktorVersion = '1.2.4'
def htmlVersion = '0.6.10'
def jetcdVersion = '0.4.1'
def utilsVersion = '1.0.5'
def recipesVersion = '0.9.13'
def loggingVersion = '1.7.6'
def slf4jVersion = '1.7.28'
def kluentVersion = '1.56'
def junitVersion = '5.5.2'

repositories {
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion"
    implementation "com.github.pambrose:etcd-recipes:${recipesVersion}"
    implementation "io.etcd:jetcd-all:${jetcdVersion}"
    implementation "com.github.pambrose:common-utils:${utilsVersion}"
    implementation "io.ktor:ktor-server-core:${ktorVersion}"
    implementation "io.ktor:ktor-server-cio:${ktorVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:${htmlVersion}"

    implementation "io.github.microutils:kotlin-logging:$loggingVersion"
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"

    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/kotlin'
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                       '-Xuse-experimental=kotlinx.serialization.UnstableDefault',
                                       '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                       '-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer',
                                       '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                                       '-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi']
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                       '-Xuse-experimental=kotlinx.serialization.UnstableDefault',
                                       '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                       '-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer',
                                       '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                                       '-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi']
}

shadowJar {
    mergeServiceFiles()
}

task adminJar(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'etcd-admin.jar'
    manifest {
        attributes('Main-Class': 'io.etcd.recipes.examples.k8s.EtcdAdmin')
    }
    from zipTree(shadowJar.archiveFile)
}

task electionJar(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'etcd-election.jar'
    manifest {
        attributes('Main-Class': 'io.etcd.recipes.examples.k8s.EtcdLeader')
    }
    from zipTree(shadowJar.archiveFile)
}

task counterJar(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'etcd-counter.jar'
    manifest {
        attributes('Main-Class': 'io.etcd.recipes.examples.k8s.EtcdCounter')
    }
    from zipTree(shadowJar.archiveFile)
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}